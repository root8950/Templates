//Comupting gcd(a,b)
a.) //inbuilt function

__gcd(a,b);

b.) //euclid gcd

ll euclid_gcd(ll a, ll b) {
	if (b == 0) {
		return a;
	}
	return euclid(b, a % b);
}

c.) //binary gcd

inline ll binary_gcd(ll a, ll b) {
	if (a == b) {
		return a;//gcd(a,a)=a
	}
	if (a == 0) {
		return b;//gcd(0,b)=b
	}
	if (b == 0) {
		return a;//gcd(a,0)=a
	}
	if (~a & 1) {// a is even
		if (b & 1){// b is odd
			return binary_gcd(a >> 1, b);//gcd(a,b)=gcd(a/2,b)
		}
		else {// both a and b are even
			return binary_gcd(a >> 1, b >> 1) << 1;//gcd(a,b)=gcd(a/2,b/2)*2
		}
	}
	if (~b & 1) {//a is odd and b is even
		return binary_gcd(a, b >> 1);//gcd(a,b)=gcd(a,b/2)
	}
	if (a > b) {
		return binary_gcd((a - b) >> 1, b);//gcd(a,b)=gcd((a-b)/2,b)
	}
	return binary_gcd((b - a) >> 1, a);//gcd(a,b)=gcd((b-a)/2,a)
}